#!/usr/bin/perl -w -CSDA

use strict;
use utf8;
use v5.022;
use Unicode::Collate;
use Storable;
use File::Slurp qw(read_dir);
use Getopt::Long;
# use Time::HiRes qw(gettimeofday tv_interval);

# my $start_time = [gettimeofday];
&usage unless scalar(@ARGV);                  # Error return if no args at all
my $uc = Unicode::Collate->new();

my $regex_flag = 0;
my @dicts;
my $dict_dir = "./dictionaries";
my $idx_dir = "./idx/";

GetOptions(
  'regex!'                => \$regex_flag,
  'lexica=s{1,}'          => \@dicts,
  'directory=s'           => \$dict_dir,
) or &usage;                                  # Error return if otions fault
$dict_dir =~ s/$/\// unless $dict_dir =~ m/\/$/;
&usage unless scalar(@ARGV);                  # Error return if no search term
my $search_regex = &detone(lc(shift @ARGV));  # Only the search term is left in ARGV

unless (scalar @dicts){                       # Look for DSLs in the working dir
  @dicts = grep {/\.dsl/} read_dir("$dict_dir");
  @dicts = map { (my $s = $_) =~ s/\.dsl//; $s} @dicts;
}

my $max_matches = 20;                          # Maximum lemata to return

my $lemma;
unless ($regex_flag){
  $lemma = qr/^$search_regex-?\d?$/;
}else{
  $lemma = qr/$search_regex/;
}

foreach my $dict (@dicts){
  # $dict = $dict_dir . $dict;
  my $dict_file = $dict_dir . $dict . '.dsl';
  my $dict_index = $idx_dir . $dict . '.idx';
  my %w_index;

  &dict_indexer($dict) unless -e $dict_index;      # Generate index if not there

  %w_index = %{retrieve($dict_index)};

  # my $load_time = [gettimeofday];

  my %w_matches = map { $_ => $w_index{$_} }  grep {/$lemma/} keys %w_index;
  if (scalar keys %w_matches){
    print "\x1b[33;1m$dict\x1b[0m:\n";
  } else {
    print "\x1b[33;1m$dict\x1b[0m: -\n";
    next;                                         # Stop if nothing in index
  }
  # my $search_time = [gettimeofday];

  open (IN, '<', $dict_file) or die $!;
  foreach ( $uc->sort(keys %w_matches) ){
    my ($idx, $word) = @{$w_matches{$_}};            # [index, word]
    seek IN, $idx, 0;
    my $body = "";
    while(1){
      my $indent = 1;                                # default value
      my $line = <IN> ;
      last unless $line =~ /\t(?:\[(m\d?)\])?/;
      my $level = $1;
      if ($level)
      {
        $indent = 1 if $level eq 'm0';
        $indent = 2 if $level eq 'm1';
        $indent = 4 if $level eq 'm2';
        $indent = 8 if $level eq 'm3';
        $indent = 10 if $level eq 'm4';
      }
      $line =~ s/\s*\[\/?m\d?\]//g;
      &colour_Ansi($line);                                # Markups -> colour
      $body .= ( ' ' x $indent) . $line;
    }
    # $body =~ s/\s*\[\/?m\d?\]//g;

    print "\x1b[35;1m", $word, "\x1b[0m", ": ";
    print "$body\n";
  }
    # my $seek_time = [gettimeofday];
    # say "--------------------------------------";
    # printf("Load Time:             %.4f sec\n", tv_interval($start_time, $load_time));
    # printf("Headword Search Time:  %.4f sec\n", tv_interval( $load_time, $search_time));
    # printf("Explanation Seek Time: %.4f sec\n", (tv_interval $search_time, $seek_time));
    # printf("Total Time:            %.4f sec\n", (tv_interval $start_time, $seek_time));
    # say "--------------------------------------";
  close IN;
} # --- end foreach $dic

#-----------------------------------------------------------
#               Subroutines
#-----------------------------------------------------------

sub colour_Ansi
{
  my $reset='[0m';
  my $red='[0;31m';
  my $green='[0;32m';
  my $yellow='[0;33m';
  my $blue='[0;34m';
  my $purple='[0;35m';
  my $cyan='[0;36m';

  $_[0] =~ s/\[\/?i\]//g;                        # Italics out
  $_[0] =~ s/\[c\s+(?:\w+?)?green\]/$green/g;
  $_[0] =~ s/\[c\s+(?:\w+?)?blue\]/$blue/g;
  $_[0] =~ s/\[c\s+(?:\w+?)?magenta\]/$purple/g;
  $_[0] =~ s/\[c\s+(?:\w+?)?purple\]/$purple/g;
  $_[0] =~ s/\[c\s+(?:\w+?)?red\]/$red/g;
  $_[0] =~ s/\[c maroon\]/$red/g;
  # $_[0] =~ s/(\[c gray\])|(\[p\])/$cyan/g;
  $_[0] =~ s/(\[c\s+(?:\w+?)?gray\])|(\[p\])/$cyan/g;
  $_[0] =~ s/\[c\s+(?:\w+?)?yellow\]/$yellow/g;
  $_[0] =~ s/\[b\]/$yellow/g;
  $_[0] =~ s/\[ref]/$cyan/g;
  $_[0] =~ s/\[\/[bcp]\]/$reset/g;
  $_[0] =~ s/\[\/ref]/$reset/g;
  $_[0] =~ s/\\</</g;
  $_[0] =~ s/\\>/>/g;
  $_[0] =~ s!\[/?ex]!!g;
  $_[0] =~ s!\[/?trn]!!g;
  $_[0] =~ s!\[/?lang(?: id=\d+)?]!!g;
  $_[0] =~ s!\[/?c(?: [a-z]+)?\]!!g;
  $_[0] =~ s/\\\[/{/g;                          # \[ -> [
  $_[0] =~ s/\\\]/}/g;                          # \] -> ]

}

#-----------------------------------------------------------

sub decolour
{
  $_[0] =~ s/\[\/?c.*?\]//g;
  $_[0] =~ s/\[\/?b\]//g;

}

#-----------------------------------------------------------

sub dict_indexer
{
  my $dict = shift @_;
  my $dict_idx = $idx_dir . $dict . '.idx';
  my $dict_file = $dict_dir . $dict . '.dsl';

  my %w_index;
  my %dups;
  my $offset = 0;
  my $head;
  my $d_head;
  my $body_lines = 1;
  my @prev_d_heads= ();       # Store detoned heads for bodyless lemmata
  open (IN, '<', $dict_file) or die $!;
  while (<IN>) {
    next if /#/;
    next if /^\s*$/;
    unless (/^\t/){
      push @prev_d_heads, $d_head;
      $offset = tell(IN);
      my $head = $_;
      $head =~ s/(\n|\r)//g;    # Need this for DOS \n\r. Chomp leaves \r
      $head =~ s/\x{feff}//;
      my @heads = split /\s+/, $head;
      foreach (@heads){
        next if m/and/i;
        $d_head = &detone($_);
        unless (exists $w_index{$d_head}){
          $w_index{$d_head} = [$offset, $head];
        }else{
          if (exists($dups{$d_head})){
            $dups{$d_head}++;
            $w_index{$d_head . "-" ."$dups{$d_head}"} = [$offset, $head];
          }else{
            $dups{$d_head} = 1;
            $w_index{$d_head . "-1"} = [$offset, $head];
          }
        }  # -- End unless exists
      }

      #-------------------------------------------------------------
      #      Offsets of bodyless lemmata are set to the first
      #      lemma that has a body.  Good for Beeks but may give
      #      silly results in other dictionaries
      #-------------------------------------------------------------
      if ($body_lines eq 0){
        @{$w_index{$_}}[0] = $offset foreach (@prev_d_heads);
      }
      $body_lines = 0;                  # Reset lines counter
    } else {
      $body_lines++;
      @prev_d_heads =();                # Reset

    }  # -- End unless /^t/
  }
  store \%w_index, $dict_idx;
  close IN;
  print " (Indexed -> $dict_idx)\n";
  return;
}

#-----------------------------------------------------------

use Unicode::Normalize;
sub detone
{
  my $head = shift @_;
  # $head =~ s/\{+\*\}+//g;
  $head =~ s/[\}\{\(\)\*\]\[\\]+//g;
  $head =~ s/[0-9]+?\.?//g;
  $head = NFD($head);
  $head =~ s/\pM*//g;
  $head = lc $head;
  $head =~ s/\s+//;
  return $head;
}

#-----------------------------------------------------------

sub usage
{
  print << 'EOT';
  +--------------------------------------------------------------------------+
  |                                                                          |
  |                                                                          |
  |     Usage:  ./lectus <lemma>  [option]                                   |
  |                                                                          |
  |     OPTIONS:                                                             |
  |     -r or --regex               Toggle search by regular expression      |
  |     -l or --lexica              Space separated list of dictionaries     |
  |     -d or --directory           Path to the dictionaries directory       |
  |                                 Default directory path:  ./              |
  |                                                                          |
  +--------------------------------------------------------------------------+
EOT
die;
}
